//
//  BillingsNetworkService.swift
//

import NodeKit

public class BillingsNetworkService: BillingsService {

    // MARK: - Constants

    private enum Keys {
        static let smartCardOrAgreement = "smartCardOrAgreement"
    }

    // MARK: - Private Properties

    private var builder: DefaultChain<BillingsUrlRoute> {
        return DefaultChain()
    }

    // MARK: - Public Methods

    func getBalance() -> Observer<BalanceInfoEntity> {
        return builder
            .route(.get, .balance)
            .build()
            .process()
        }
    }

    func getBasket(smartCardOrAgreement: String) -> Observer<[BasketItemEntity]> {
        return builder
            .set(query: [Keys.smartCardOrAgreement: smartCardOrAgreement])
            .route(.get, .basket)
            .build()
            .process()
        }
    }

    func getContactInfo() -> Observer<UserContactInfoEntity> {
        return builder
            .route(.get, .contactInfo)
            .build()
            .process()
        }
    }

    func getIsPaymentAvailable(smartCardOrAgreement: String) -> Observer<IsPaymentAvailableResponseEntity> {
        return builder
            .set(query: [Keys.smartCardOrAgreement: smartCardOrAgreement])
            .route(.get, .isPaymentAvailable)
            .build()
            .process()
        }
    }

    func postPayment(smartCardOrAgreement: String, paymentDetailsRequest: PaymentDetailsRequestEntity) -> Observer<PaymentDetailsResponseEntity> {
        return builder
            .set(query: [Keys.smartCardOrAgreement: smartCardOrAgreement])
            .route(.post, .payment)
            .build()
            .process(paymentDetailsRequest)
        }
    }

    func postPaymentsInfo(paymentsInfoRequest: PaymentsInfoRequestEntity) -> Observer<[PaymentTypeItemEntity]> {
        return builder
            .route(.post, .paymentsInfo)
            .build()
            .process(paymentsInfoRequest)
        }
    }

}
