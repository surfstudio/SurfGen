//
//  UserNetworkService.swift
//

import NodeKit

public class UserNetworkService: UserService {

    // MARK: - Constants

    private enum Keys {
        static let password = "password"
        static let username = "username"
    }

    // MARK: - Private Properties

    private var builder: DefaultChain<UserUrlRoute> {
        return DefaultChain()
    }

    // MARK: - Public Methods

    func createUser(user: UserEntity) -> Observer<Void> {
        return builder
            .route(.post, .user)
            .build()
            .process(user)
        }
    }

    func createUsersWithListInput(user: [UserEntity]) -> Observer<UserEntity> {
        return builder
            .route(.post, .createWithList)
            .build()
            .process()
        }
    }

    func deleteUser(username: String) -> Observer<Void> {
        return builder
            .route(.delete, .userUsername(username: username))
            .build()
            .process()
        }
    }

    func getUserByName(username: String) -> Observer<UserEntity> {
        return builder
            .route(.get, .userUsername(username: username))
            .build()
            .process()
        }
    }

    func loginUser(username: String, password: String) -> Observer<String> {
        return builder
            .set(query: [Keys.username: username, Keys.password: password])
            .route(.get, .login)
            .build()
            .process()
        }
    }

    func logoutUser() -> Observer<Void> {
        return builder
            .route(.get, .logout)
            .build()
            .process()
        }
    }

    func updateUser(username: String, user: UserEntity) -> Observer<Void> {
        return builder
            .route(.put, .userUsername(username: username))
            .build()
            .process(user)
        }
    }

}
