//
//  {{ service.name }}NetworkService.swift
//

import NodeKit

public class {{ service.name }}NetworkService: {{ service.name }}Service {
{% if service.codingKeys %}
    // MARK: - Constants

    private enum Keys {
        {% for key in service.codingKeys %}static let {{ key|snakeCaseToCamelCase }} = "{{ key }}"{% if not forloop.last %}
        {% endif %}{% endfor %}
    }
{% endif %}
    // MARK: - Private Properties

    private var builder: DefaultChain<{{ service.name }}UrlRoute> {
        return DefaultChain()
    }

    // MARK: - Public Methods
{% for path in service.paths %}{% for operation in path.operations %}{% for requestModelName in operation.requestGenerationModel.typeNames %}
    {% for line in operation.description|splitLines %}
    /// {{ line }}{% endfor %}public func {{ operation.httpMethod }}{{ path.name|capitalizeFirstLetter }}({% for parameter in operation.pathParameters %}{#
    #}{{ parameter.name }}: String, {% endfor %}{#
    #}{% for parameter in operation.queryParameters %}{{ parameter.name }}: {#
    #}{% if parameter.isTypeArray %}[{% endif %}{#
    #}{% if parameter.typeName == "integer" %}Int{#
    #}{% elif parameter.typeName == "number" %}Double{#
    #}{% elif parameter.typeName == "string" %}String{#
    #}{% elif parameter.typeName == "boolean" %}Bool{#
    #}{% else %}{{ parameter.typeName }}{% if parameter.isTypeObject %}Entity{% endif %}{% endif %}{#
    #}{% if parameter.isTypeArray %}]{% endif %}{#
    #}{% if not parameter.isRequired %}?{% endif %}, {% endfor %}{#
    #}{{ requestModelName|lowercaseFirstLetter }}{% if operation.requestGenerationModel.isTypeArray %}s{% endif %}: {#
        #}{% if operation.requestGenerationModel.isTypeArray %}[{% endif %}{{ requestModelName }}{#
    #}{% if operation.requestGenerationModel.isTypeObject %}Entity{% endif %}{#
    #}{% if operation.requestGenerationModel.isTypeArray %}]{% endif %}{#
    #}{% if not operation.requestModel.isRequired %}?{% endif %}) -> Observer<{% if operation.responseGenerationModel %}{#
    #}{% if operation.responseGenerationModel.isTypeArray %}[{% endif %}{#
    #}{% for responseName in operation.responseGenerationModel.typeNames %}{{ responseName }}{% endfor %}{#
    #}{% if operation.responseGenerationModel.isTypeObject %}Entity{% endif %}{#
    #}{% if operation.responseGenerationModel.isTypeArray %}]{% endif %}{#
    #}{% else %}Void{% endif %}> {
        return builder{% if operation.queryParameters %}
            .set(query: [{% for parameter in operation.queryParameters %}{#
            #}Keys.{{ parameter.name|snakeCaseToCamelCase }}: {{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %}]){% endif %}
            .route(.{{ operation.httpMethod }}, .{{ path.name }}{#
            #}{% if path.parameters %}({% for parameter in path.parameters %}{{ parameter.name }}: {{ parameter.name }}{#
            #}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}){% if operation.requestGenerationModel.encoding == "application/x-www-form-urlencoded" %}
            .encode(as: .formUrl){% endif %}
            .build()
            .process({{ requestModelName|lowercaseFirstLetter }})
    }
{% empty %}
    {% for line in operation.description|splitLines %}
    /// {{ line }}{% endfor %}public func {{ operation.httpMethod }}{{ path.name|capitalizeFirstLetter }}({% for parameter in operation.pathParameters %}{#
    #}{{ parameter.name }}: String{% if not forloop.last or operation.queryParameters %}, {% endif %}{% endfor %}{#
    #}{% for parameter in operation.queryParameters %}{{ parameter.name }}: {#
    #}{% if parameter.isTypeArray %}[{% endif %}{#
    #}{% if parameter.typeName == "integer" %}Int{#
    #}{% elif parameter.typeName == "number" %}Double{#
    #}{% elif parameter.typeName == "string" %}String{#
    #}{% elif parameter.typeName == "boolean" %}Bool{#
    #}{% else %}{{ parameter.typeName }}{% if parameter.isTypeObject %}Entity{% endif %}{% endif %}{#
    #}{% if parameter.isTypeArray %}]{% endif %}{#
    #}{% if not parameter.isRequired %}?{% endif %}{#
    #}{% if not forloop.last %}, {% endif %}{% endfor %}) -> Observer<{% if operation.responseGenerationModel %}{#
    #}{% if operation.responseGenerationModel.isTypeArray %}[{% endif %}{#
    #}{% for responseName in operation.responseGenerationModel.typeNames%}{{ responseName }}{% endfor %}{#
    #}{% if operation.responseGenerationModel.isTypeObject %}Entity{% endif %}{#
    #}{% if operation.responseGenerationModel.isTypeArray %}]{% endif %}{#
    #}{% else %}Void{% endif %}> {
        return builder{% if operation.queryParameters %}
            .set(query: [{% for parameter in operation.queryParameters %}{#
            #}Keys.{{ parameter.name }}: {{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %}]){% endif %}
            .route(.{{ operation.httpMethod }}, .{{ path.name }}{#
            #}{% if path.parameters %}({% for parameter in path.parameters %}{{ parameter.name }}: {{ parameter.name }}{#
            #}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}){% if operation.requstGenerationModel.encoding == "application/x-www-form-urlencoded" %}
            .encode(as: .formUrl){% endif %}
            .build()
            .process()
    }
{% endfor %}{% endfor %}{% endfor %}
}