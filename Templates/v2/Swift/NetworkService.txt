//
//  {{ service.name }}NetworkService.swift
//

import NodeKit

public class {{ service.name }}NetworkService: {{ service.name }}Service {

    // MARK: - Private Properties

    private var builder: DefaultChain<{{ service.name }}UrlRoute> {
        return DefaultChain()
    }

    // MARK: - Public Methods
{% for path in service.paths %}{% for operation in path.operations %}
    {% if operation.description %}/// {{ operation.description }}
    {% endif %}public func {{ operation.httpMethod }}{{ path.name|capitalizeFirstLetter }}({% for parameter in operation.pathParameters %}{#
    #}{{ parameter.name }}: String{% if not forloop.last or operation.queryParameters or operation.requestGenerationModel.typeName %}, {% endif %}{% endfor %}{#
    #}{% for parameter in operation.queryParameters %}{{ parameter.name }}: {#
    #}{% if parameter.isTypeArray %}[{% endif %}{#
    #}{% if parameter.typeName == "integer" %}Int{#
    #}{% elif parameter.typeName == "number" %}Double{#
    #}{% elif parameter.typeName == "string" %}String{#
    #}{% elif parameter.typeName == "boolean" %}Bool{#
    #}{% else %}{{ parameter.typeName }}{% if parameter.isTypeObject %}Entity{% endif %}{% endif %}{#
    #}{% if parameter.isTypeArray %}]{% endif %}{#
    #}{% if not forloop.last or operation.requestGenerationModel %}, {% endif %}{% endfor %}{#
    #}{% if operation.requestGenerationModel %}{#
    #}{% if operation.requestGenerationModel.isTypeArray %}[{% endif %}{#
    #}{{ operation.requestGenerationModel.typeName|lowercaseFirstLetter }}: {{ operation.requestGenerationModel.typeName }}{#
    #}{% if operation.requestGenerationModel.isTypeObject %}Entity{% endif %}{#
    #}{% if operation.requestGenerationModel.isTypeArray %}]{% endif %}{#
    #}{% endif %}) -> Observer<{#
    #}{% if operation.responseGenerationModel.isTypeArray %}[{% endif %}{#
    #}{{ operation.responseGenerationModel.typeName }}{#
    #}{% if operation.responseGenerationModel.isTypeObject %}Entity{% endif %}{#
    #}{% if operation.responseGenerationModel.isTypeArray %}]{% endif %}{#
    #}> {
        return builder{% if operation.queryParameters %}
            .set(query: [{% for parameter in operation.queryParameters %}{#
            #}"{{ parameter.name }}": {{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %}]){% endif %}
            .route(.{{ operation.httpMethod }}, .{{ path.name }}{#
            #}{% if path.parameters %}({% for parameter in path.parameters %}{{ parameter.name }}: {{ parameter.name }}{#
            #}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}){% if operation.requstGenerationModel.encoding == "application/x-www-form-urlencoded" %}
            .encode(as: .formUrl){% endif %}
            .build()
            .process({% if operation.requestGenerationModel %}{{ operation.requestGenerationModel.typeName|lowercaseFirstLetter }}{% endif %})
    }
{% endfor %}{% endfor %}
}