
import NodeKit
{% if description %}
/**
 {{ description }}
*/{% endif %}
public struct {{ entityName }} {

    // MARK: - Public Properties

{% for property in properties %}    {% if property.description %}/// {{ property.description }}
    {% endif %}public let {{ property.entityName }}: {{ property.type }}
{% endfor %}
    // MARK: - Initialization

    public init({% for property in properties %}{{property.entityName}}: {{property.type}}{% if not forloop.last %},
                {% else %}) {{ codeOpenBracket }}{% endif %}{% endfor %}
    {% for property in properties %}    self.{{ property.entityName }} = {{ property.entityName }}
    {% endfor %}}

}

// MARK: - DTOConvertible

extension {{ entityName }}: DTOConvertible {
{% if not isPlain %}
    public static func from(dto model: {{ entryName }}) throws -> {{ entityName }} {
        return try .init({% for property in properties %}{{ property.entityName }}: {{ property.fromInit }}{% if not forloop.last %},
                         {% endif %}{% endfor %})
    }

    public func toDTO() throws -> {{ entryName }} {
        return try .init({% for property in properties %}{{ property.entryName }}: {{ property.toDTOInit }}{% if not forloop.last %},
                         {% endif %}{% endfor %})
    }
{% else %}
    public static func from(dto model: {{ entryName }}) throws -> {{ entityName }} {
        return .init({% for property in properties %}{{ property.entityName }}: {{ property.fromInit }}{% if not forloop.last %},
                     {% endif %}{% endfor %})
    }

    public func toDTO() throws -> {{ entryName }} {
        return .init({% for property in properties %}{{ property.entryName }}: {{ property.toDTOInit }}{% if not forloop.last %},
                     {% endif %}{% endfor %})
    }
{% endif %}
}
